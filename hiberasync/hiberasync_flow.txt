# hiberasync 프로젝트 흐름 설명

이 문서는 `hiberasync` 프로젝트의 전체적인 구조와 데이터 처리 흐름을 설명합니다.

## 1. 프로젝트 구조

`hiberasync`는 Maven 기반의 자바 웹 애플리케이션으로, 다음과 같은 주요 기술을 사용합니다.

-   **서블릿 (Servlet)**: 클라이언트의 요청을 처리하고 비즈니스 로직을 수행합니다.
-   **JSP (JavaServer Pages)**: 서블릿이 처리한 결과를 웹 페이지에 동적으로 표시합니다.
-   **Hibernate**: 데이터베이스와의 상호작용을 관리하는 ORM(Object-Relational Mapping) 프레임워크입니다.
-   **Apache Commons FileUpload**: 파일 업로드 기능을 구현합니다.

주요 디렉터리 구조는 다음과 같습니다.

-   `src/main/java`: 자바 소스 코드 (서블릿, 모델, DAO 등)
-   `src/main/webapp`: 웹 관련 파일 (JSP, HTML, CSS, JS) 및 설정 (`web.xml`)
-   `src/main/resources`: Hibernate 설정 (`hibernate.cfg.xml`) 및 로깅 설정 (`logback.xml`)
-   `pom.xml`: Maven 프로젝트 설정 (의존성 관리)

## 2. 실행 흐름

### 가. 웹 요청 처리 (Client → Servlet)

1.  **요청 발생**: 사용자가 웹 브라우저에서 특정 URL을 요청합니다. (예: `/store/list`)

2.  **필터 (Filter)**: `web.xml`에 등록된 `CharacterEncodingFilter`가 모든 요청을 가로채 문자 인코딩을 UTF-8로 설정합니다. 이는 한글 깨짐을 방지합니다.

3.  **서블릿 매핑 (Servlet Mapping)**: `web.xml` 또는 어노테이션(`@WebServlet`)을 통해 요청 URL과 이를 처리할 서블릿이 매핑됩니다.
    -   `/store/list` → `StoreList.java`
    -   `/store/regist` → `StoreRegist.java`
    -   `/upload/regist` → `UploadServlet.java`

4.  **서블릿 실행**: 매핑된 서블릿의 `doGet()` 또는 `doPost()` 메서드가 실행되어 요청을 처리합니다.

### 나. 비즈니스 로직 및 데이터 처리 (Servlet → DAO → DB)

1.  **요청 데이터 처리**: 서블릿은 `request.getParameter()` 등을 통해 클라이언트가 보낸 데이터를 받습니다.

2.  **DAO 호출**: 비즈니스 로직을 수행하기 위해 DAO(Data Access Object)를 호출합니다. DAO는 데이터베이스 관련 작업을 전담합니다.
    -   `StoreDAO`: 가게(Store) 정보 관련 CRUD
    -   `FoodTypeDAO`: 음식 종류(FoodType) 정보 관련 CRUD

3.  **Hibernate 세션**: DAO는 `HibernateConfig`를 통해 Hibernate `SessionFactory`를 얻고, `Session`을 열어 데이터베이스 트랜잭션을 시작합니다.

4.  **데이터베이스 작업**: Hibernate `Session`을 통해 HQL(Hibernate Query Language)을 실행하거나, `save()`, `update()`, `delete()` 등의 메서드를 사용하여 데이터베이스와 상호작용합니다.
    -   **등록**: `session.save(store)`
    -   **조회**: `session.createQuery("FROM Store").list()`
    -   **수정**: `session.update(store)`
    -   **삭제**: `session.delete(store)`

5.  **트랜잭션 완료**: 작업이 성공적으로 끝나면 트랜잭션을 커밋(`commit`)하고, 실패하면 롤백(`rollback`)합니다. 마지막으로 `Session`을 닫습니다.

### 다. 결과 응답 (Servlet → JSP → Client)

1.  **결과 데이터 설정**: 서블릿은 DAO로부터 받은 결과 데이터(예: 가게 목록)를 `request`나 `session` 객체에 `setAttribute()`를 사용하여 저장합니다.

2.  **JSP로 포워딩**: `RequestDispatcher`를 사용하여 요청을 처리할 JSP 페이지로 포워딩합니다.
    -   `request.getRequestDispatcher("/store/list.jsp").forward(request, response);`

3.  **동적 페이지 생성**: JSP는 HTML 코드 내에서 스크립틀릿(`<% ... %>`)이나 표현식(`<%= ... %>`), JSTL 등을 사용하여 `request` 객체에 저장된 데이터를 동적으로 출력합니다.

4.  **HTML 응답**: 완성된 HTML 페이지가 클라이언트(웹 브라우저)로 전송되어 사용자에게 표시됩니다.

## 3. 주요 기능 흐름

-   **가게 목록 조회 (`/store/list`)**
    1.  `StoreList` 서블릿이 `StoreDAO`를 통해 모든 가게 정보를 조회합니다.
    2.  조회된 목록을 `request`에 저장하고 `list.jsp`로 포워딩합니다.
    3.  `list.jsp`에서 목록을 반복하며 테이블 형태로 출력합니다.

-   **가게 등록 (`/store/regist`)**
    1.  사용자가 `regist.html`에서 정보를 입력하고 전송합니다.
    2.  `StoreRegist` 서블릿이 파라미터를 받아 `Store` 객체를 생성합니다.
    3.  `StoreDAO`를 통해 `Store` 객체를 데이터베이스에 저장합니다.
    4.  성공/실패 메시지를 `Message` 유틸 클래스를 사용하여 생성하고, 알림창을 띄운 후 목록 페이지로 리다이렉트합니다.

-   **파일 업로드 (`/upload/regist`)**
    1.  사용자가 `write.html`에서 파일을 선택하고 업로드합니다.
    2.  `UploadServlet`이 `multipart/form-data` 요청을 받습니다.
    3.  Apache Commons FileUpload 라이브러리를 사용하여 파일을 파싱하고 서버의 `/data` 디렉터리에 저장합니다.
    4.  저장된 파일명을 `session`에 저장하고 `result.jsp`로 리다이렉트합니다.
    5.  `result.jsp`에서 `session`에 저장된 파일명을 읽어 이미지를 화면에 표시합니다.
